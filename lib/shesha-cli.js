// Generated by LiveScript 1.5.0
(function(){
  var Shesha, fs, args, mode, gen, readSourceData, USAGE, NUM, arg, TEXT, key, ref$, val, i$, ii;
  Shesha = require('./shesha');
  fs = require('fs');
  args = process.argv.slice(2);
  mode = 'template';
  gen = new Shesha.Generator();
  readSourceData = function(it){
    return JSON.parse(fs.readFileSync(it, 'utf-8'));
  };
  USAGE = "Usage: ./shesha [template] [-c cards.json ...] [-d dice.json ...] [-t template.shesha]\n\nGenerate random sentences based on templates.\n\n    -c         use json file as list of decks\n    -d         use json file as dice\n    -t         use file as shesha language template\n    template   template to render\n\nJSON input files should contain an object with keys that map to lists. Nested\nobjects are not supported.\n\nAll arguments are optional, though you'll probably want a template or template\nfile.";
  mode = 'TEXT';
  NUM = 1;
  while (args.length > 0) {
    arg = args.shift();
    switch (arg) {
    case '-h':
    case '--help':
      console.log(USAGE);
      process.exit(0);
      break;
    case '-n':
      NUM = +args.shift();
      break;
    case '-c':
      mode = 'CARDS';
      break;
    case '-d':
      mode = 'DICE';
      break;
    case '-t':
      mode = 'TEMPLATE';
      break;
    default:
      switch (mode) {
      case 'TEXT':
        TEXT = arg;
        break;
      case 'CARDS':
        for (key in ref$ = readSourceData(arg)) {
          val = ref$[key];
          gen.addDeck(key, val);
        }
        break;
      case 'DICE':
        for (key in ref$ = readSourceData(arg)) {
          val = ref$[key];
          gen.addDie(key, val);
        }
        break;
      case 'TEMPLATE':
        gen.readGenerator(fs.readFileSync(arg, 'utf-8'));
      }
    }
  }
  if (TEXT) {
    for (i$ = 0; i$ < NUM; ++i$) {
      ii = i$;
      console.log(gen.render(TEXT));
    }
  }
}).call(this);
